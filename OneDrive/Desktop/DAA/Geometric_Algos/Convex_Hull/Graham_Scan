from functools import cmp_to_key

# A utility function to find the orientation of the ordered triplet (p, q, r).
# The function returns:
# 0 if p, q, and r are collinear
# 1 if Clockwise
# 2 if Counterclockwise
def orientation(p, q, r):
    val = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1])
    if val == 0:
        return 0
    elif val > 0:
        return 1
    else:
        return 2

# Function to calculate the squared distance between two points
def distance_squared(p1, p2):
    return (p1[0] - p2[0])**2 + (p1[1] - p2[1])**2

# Sorting comparator for polar angle with respect to the pivot
def polar_angle(p0):
    def compare(p1, p2):
        orient = orientation(p0, p1, p2)
        if orient == 0:
            return distance_squared(p0, p1) - distance_squared(p0, p2)
        return -1 if orient == 2 else 1
    return compare

# Main function to find the convex hull using Graham Scan
def graham_scan(points):
    # Step 1: Find the point with the lowest y-coordinate, breaking ties by x-coordinate
    points = sorted(points, key=lambda p: (p[1], p[0]))
    p0 = points[0]

    # Step 2: Sort the points based on polar angle with respect to p0
    sorted_points = sorted(points[1:], key=cmp_to_key(polar_angle(p0)))
    sorted_points.insert(0, p0)  # add the starting point back to the list

    # Step 3: Build the hull
    hull = [sorted_points[0], sorted_points[1]]

    for p in sorted_points[2:]:
        while len(hull) > 1 and orientation(hull[-2], hull[-1], p) != 2:
            hull.pop()  # Pop until the turn is counter-clockwise
        hull.append(p)

    return hull

# Example usage
points = [(0, 3), (2, 2), (1, 1), (2, 1), (3, 0), (0, 0), (3, 3)]
hull = graham_scan(points)
print("Convex Hull:", hull)
