def orientation(p, q, r):
    """ Return orientation of triplet (p, q, r).
        0 -> p, q and r are collinear
        1 -> Clockwise
        2 -> Counterclockwise
    """
    val = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1])
    if val == 0:
        return 0
    elif val > 0:
        return 1
    else:
        return 2

def jarvis_march(points):
    # There must be at least 3 points
    if len(points) < 3:
        return points
    
    # Initialize the convex hull
    hull = []
    
    # Find the leftmost point
    leftmost = min(points, key=lambda p: p[0])
    point_on_hull = leftmost

    while True:
        # Add current point to hull
        hull.append(point_on_hull)
        # Find the next point that is most counterclockwise to the current point
        next_point = points[0]
        for p in points:
            if next_point == point_on_hull or orientation(point_on_hull, next_point, p) == 2:
                next_point = p
        point_on_hull = next_point
        
        # Break if we've wrapped back to the first point
        if point_on_hull == leftmost:
            break
    
    return hull

# Example usage
points = [(0, 3), (2, 2), (1, 1), (2, 1), (3, 0), (0, 0), (3, 3)]
hull = jarvis_march(points)
print("Convex Hull:", hull)
