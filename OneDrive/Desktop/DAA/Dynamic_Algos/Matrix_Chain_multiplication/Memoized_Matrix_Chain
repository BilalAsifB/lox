def look_up_chain(m, p, i, j):
    if m[i][j] < float('inf'):
        return m[i][j]
    if i == j:
        m[i][j] = 0
    else:
        for k in range(i, j):
            q = look_up_chain(m, p, i, k) + look_up_chain(m, p, k + 1, j) + p[i - 1] * p[k] * p[j]
            if q < m[i][j]:
                m[i][j] = q
    
    return m[i][j]

def memoized_matrix_chain(p, n):
    m = {i: {} for i in range(n + 1)}
    
    for i  in range(1, n + 1):
        for j in range(i, n + 1):
            m[i][j] = float('inf')

    return look_up_chain(m, p, 1, n)