def print_optimal_solution(s, i, j):
    if i == j:
        print(f"Matrix A{i}")  # Print the name of the matrix (A1, A2, ...)
    else:
        print("(", end="")  # Opening parenthesis for the current split
        print_optimal_solution(s, i, s[i][j])  # Left part
        print_optimal_solution(s, s[i][j] + 1, j)  # Right part
        print(")", end="")  # Closing parenthesis for the current split

def matrix_chain_order(p, n):
    m = {i: {} for i in range(1, n + 1)}
    s = {i: {} for i in range(1, n + 1)}

    for i in range(1, n + 1):
        m[i][i] = 0
    
    for l in range(2, n + 1):
        for i in range(1, n - l + 1):
            j = i + l - 1
            m[i][j] = float('inf')
            
            for k in range(i, j):
                q = m[i][k] + m[k + 1][j] + p[i - 1] * p[k] * p[j]
                if q < m[i][j]:
                    m[i][j] = q
                    s[i][j] = k
    
    return (m, s)

p = [30, 35, 15, 5, 10, 20, 25]
result = matrix_chain_order(p, len(p))
print("Optimal Parenthesization:")
print_optimal_solution(result[1], 1, len(p) - 1) 